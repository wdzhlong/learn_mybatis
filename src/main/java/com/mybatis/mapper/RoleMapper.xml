<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.RoleMapper">
    <!--
        缓存：Mybatis默认只开启一级缓存（一级缓存只是相对于同一个sqlSession而言）
        所以在参数和sql完全一样的情况下，我们使用同一个SqlSession对像调用同一个Mapper的方法，往往只执行一次SQL，因为
        使用SqlSession第一次查询后，MyBatis会将其放在缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没超时的
        情况下，SqlSession都只会取当前缓存的数据，而不会再次发送SQL到数据库。
    -->
    <!--开启二级缓存，二级缓存是SqlSessionFactory层面的，Mybatis要求返回的POJO是可序列化的
        默认情况下：
            所有select语句将会被缓存，insert,update,delete语句会刷新缓存
            使用默认的（LRU,最近最少使用）算法来回收。
            缓存会存储列表集合或对象（无论查询方法返回什么）的1024个引用
            缓存会被视为是read/write（可读/可写）的缓存，意味着对象检索不是共享的，而且可以安全地被调用者修改，不干扰其他调用者或线程所做的潜在修改。
    -->
    <cache/>
    <!--
        eviction:缓存回收策略，目前Mybatis提供以下策略
        1.LRU,最近最少使用的，移除最长时间不用的对象。
        2.FIFO,先进先出，按对象进入缓存的顺序来移除它们。
        3.SOFT，软引用，移除基于垃圾回收器状态和软引用规则的对象
        4.WEAK,弱引用
        flushInterval:刷新间隔时间，单位为毫秒，如果不配置，那么当SQL被执行的时候才会去刷新缓存
        size:引用数目，一个正整数，代表缓存可以存储多少个对象，不宜设置过大，设置过大会导致内存溢出
        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是
        我们没有办法修改缓存，它的默认值为false,不允许我们修改

        <cache eviction="LRU" flushInterval="100000" size="1024" readOnly="true"/>
    -->
    <!--
    对某一命名空间的语句，只会使用该命名空间的缓存进行缓存或刷新。 但你可能会想要在多个命名空间中共享相同的缓存配置
    和实例。要实现这种需求，你可以使用 cache-ref 元素来引用另一个缓存。
    <cache-ref namespace="com.mybatis.mapper.StudentMapper"/>
    -->
    <!--
        id:当前命名空间中的一个唯一标识，用于标识一个结果映射。
        type:类的完全限定名, 或者一个类型别名
        autoMapping:如果设置这个属性，MyBatis将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。
    -->
    <resultMap id="roleResultMap" type="com.mybatis.entity.Role">
        <!--用于在实例化类时，注入结果到构造方法中-->
        <!--<constructor>
            &lt;!&ndash;将被注入到构造方法的一个普通结果&ndash;&gt;
            <arg>

            </arg>
            &lt;!&ndash; ID参数；标记出作为 ID 的结果可以帮助提高整体性能&ndash;&gt;
            <idArg/>
        </constructor>-->
        <!--id:一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能-->
        <id property="id" column="id"/>
        <!--result:注入到字段或 JavaBean 属性的普通结果-->
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>

    <!--sql元素可以被用来定义可重用的SQL代码段-->
    <sql id="baseColusm">
		id,role_name,note
	</sql>

    <!--select元素帮助我们从数据库中读取数据
        id:它和mapper的命名空间组合起来是唯一的，提供给mybatis调用
        paramterType:可以给出类的全名，也可以给出类的别名，但使用别名必须是MyBatis内部定义或者自定义的
        可以选择javaBean、map等复杂的参数类型传递给SQL
        这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler） 推断出具体传入语句的参数，默认值为未设置（unset）
        resultType：从这条语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 resultType 或 resultMap，但不能同时使用。
        resultMap：外部 resultMap 的命名引用。可以使用 resultMap 或 resultType，但不能同时使用。
        flushCache:将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。
        useCache:将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。
        timeout:这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖驱动）。
        fetchSize:这是一个给驱动的提示，尝试让驱动程序每次批量返回的结果行数和这个设置值相等。 默认值为未设置（unset）（依赖驱动）。
        statementType:STATEMENT，PREPARED 或 CALLABLE 中的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        resultSetType:FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖驱动）。
        databaseId:如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
        resultOrdered:这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。 这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
        resultSets:这个设置仅对多结果集的情况适用。它将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的。
    -->
    <select id="getRole" resultType="com.mybatis.entity.Role">
        select
        <include refid="baseColusm"/>
        from t_role where id = #{id}
    </select>

    <!--<select id="selectRoleByMap" parameterType="map" resultType="com.mybatis.entity.Role">
        select * from t_role where role_name = #{roleName} and note = #{note}
    </select>-->
    <!--where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，
    若语句的开头为“AND”或“OR”，where 元素也会将它们去除。-->
    <select id="selectRoleByParam" resultType="com.mybatis.entity.Role">
		select * from t_role
		<where>
            <choose>
                <when test="roleName != null">
                    role_name = #{roleName}
                </when>
                <when test="roleName != ''">
                    and role_name = #{roleName}
                </when>
                <otherwise>
                    and role_name = #{roleName}
                </otherwise>
            </choose>
            <if test="note != null and note != ''">
                and note = #{note}
            </if>
        </where>
	</select>
    <!--mybatis两个内置参数
        _parameter:代表整个参数,单个参数_parameter 就是这个参数,多个参数会被封装成一个map,_parameter就是代表这个map
        _databaseId:如果配置了databaseIdProvider标签， _databaseId就是代表当前数据库的别名，mysql或者oracle等等。
    -->
    <select id="selectByRole" parameterType="com.mybatis.entity.Role" resultType="com.mybatis.entity.Role">
		select * from t_role where role_name = #{roleName} and note = #{note}
	</select>
    <!--item表示集合项，index表示索引变量，separator表示分隔符，open,close指定开头与结尾符,collection指定集合-->
    <select id="selectByIds" resultType="com.mybatis.entity.Role">
        select * from t_role where id in
        <foreach item="item" index="index" collection="array" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
    <select id="selectByList" resultType="com.mybatis.entity.Role">
        select * from t_role where id in
        <foreach item="item" index="index" collection="list" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
    <!--prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。它的作用是移除所有指定
    在 prefixOverrides 属性中的内容，并且插入 prefix 属性中指定的内容。-->
    <select id="getMRoleReturnMap" resultType="com.mybatis.entity.Role">
		select * from t_role
        <trim prefix="WHERE" prefixOverrides="AND |OR " suffixOverrides=" AND">
            role_name = #{roleName}
        </trim>
	</select>

    <select id="getRoleReturnMap" resultType="map">
		select * from t_role where id = #{id}
	</select>
    <!--
        id:命名空间中的唯一标识符，可被用来代表这条语句。
        parameterType:将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器推断出具体传入语句的参数，默认值为未设置（unset）。
        flushCache:将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：true（对于 insert、update 和 delete 语句）。
        timeout:这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖驱动）。
        statementType:STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        useGeneratedKeys:（仅对insert和update有用）这会令MyBatis使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
        keyProperty:仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认值：未设置（unset）。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
        keyColumn:仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望使用多个生成的列，也可以设置为逗号分隔的属性名称列表。
        databaseId:如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
        如果参数类型是Map,则必须要指定类型
    -->
    <insert id="insertRole" parameterType="role" keyProperty="id" useGeneratedKeys="true" keyColumn="id">
		insert into t_role (role_name,note) values (#{roleName},#{note})
	</insert>

    <insert id="insertRoleCustom" parameterType="role" keyProperty="id" useGeneratedKeys="true">
        <!--
            对于不支持自动生成类型的数据库或可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键。
            selectKey 元素中的语句将会首先运行，t_role 的 id 会被设置，然后插入语句会被调用。这可以提供给你一个与数据库中自动生成主键类似的行为，同时保持了 Java 代码的简洁。
            keyProperty:selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
            keyColumn:匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
            resultType:结果的类型。MyBatis 通常可以推断出来，但是为了更加精确，写上也不会有什么问题。
            order:这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先生成主键，设置 keyProperty 然后执行插入语句。
            如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句
            内部可能有嵌入索引调用。
        -->
        <selectKey keyProperty="id" resultType="long" order="BEFORE" statementType="PREPARED">
            select if(max(id) is null,1,max(id) + 2) as newId from t_role
        </selectKey>
        insert into t_role (id,role_name,note) values (#{id},#{roleName},#{note})
    </insert>

    <delete id="deleteRole" parameterType="long">
		delete from t_role where id = #{id}
	</delete>
</mapper>